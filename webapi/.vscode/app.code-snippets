{
    "ASP.NET Model": {
        "prefix": "cmodel",
        "body": [
            "using System;",
            "using System.ComponentModel.DataAnnotations;",
            "",
            "namespace ${1:YourNamespace}.Models",
            "{",
            "    public class ${2:ModelName}",
            "    {",
            "        [Key]",
            "        public int Id { get; set; }",
            "",
            "        public string Name { get; set; }",
            "        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;",
            "    }",
            "}"
        ],
        "description": "Cria um modelo básico para o Entity Framework."
    },
    "ASP.NET Controller": {
        "prefix": "ccontroller",
        "body": [
            "using Microsoft.AspNetCore.Mvc;",
            "using ${1:YourNamespace}.Models;",
            "",
            "namespace ${1:YourNamespace}.Controllers",
            "{",
            "    [ApiController]",
            "    [Route(\"api/[controller]\")]",
            "    public class ${2:ControllerName}Controller : ControllerBase",
            "    {",
            "        [HttpGet]",
            "        public IActionResult Get()",
            "        {",
            "            return Ok(new { message = \"Hello from ${2:ControllerName}Controller\" });",
            "        }",
            "    }",
            "}"
        ],
        "description": "Cria um controller básico com uma rota de API."
    },
    "ASP.NET Repository Interface": {
        "prefix": "crepositoryinterface",
        "body": [
            "using System.Collections.Generic;",
            "using System.Threading.Tasks;",
            "using ${1:YourNamespace}.Models;",
            "",
            "namespace ${1:YourNamespace}.Repositories",
            "{",
            "    public interface I${2:Entity}Repository",
            "    {",
            "        Task<IEnumerable<${2:Entity}>> GetAllAsync();",
            "        Task<${2:Entity}> GetByIdAsync(int id);",
            "        Task AddAsync(${2:Entity} entity);",
            "        Task UpdateAsync(${2:Entity} entity);",
            "        Task DeleteAsync(int id);",
            "    }",
            "}"
        ],
        "description": "Cria uma interface para um repositório genérico."
    },
    "ASP.NET Repository Implementation": {
        "prefix": "crepository",
        "body": [
            "using System.Collections.Generic;",
            "using System.Threading.Tasks;",
            "using ${1:YourNamespace}.Data;",
            "using ${1:YourNamespace}.Models;",
            "using Microsoft.EntityFrameworkCore;",
            "",
            "namespace ${1:YourNamespace}.Repositories",
            "{",
            "    public class ${2:Entity}Repository : I${2:Entity}Repository",
            "    {",
            "        private readonly ApplicationDbContext _context;",
            "",
            "        public ${2:Entity}Repository(ApplicationDbContext context)",
            "        {",
            "            _context = context;",
            "        }",
            "",
            "        public async Task<IEnumerable<${2:Entity}>> GetAllAsync()",
            "        {",
            "            return await _context.${2:Entity}s.ToListAsync();",
            "        }",
            "",
            "        public async Task<${2:Entity}> GetByIdAsync(int id)",
            "        {",
            "            return await _context.${2:Entity}s.FindAsync(id);",
            "        }",
            "",
            "        public async Task AddAsync(${2:Entity} entity)",
            "        {",
            "            await _context.${2:Entity}s.AddAsync(entity);",
            "            await _context.SaveChangesAsync();",
            "        }",
            "",
            "        public async Task UpdateAsync(${2:Entity} entity)",
            "        {",
            "            _context.${2:Entity}s.Update(entity);",
            "            await _context.SaveChangesAsync();",
            "        }",
            "",
            "        public async Task DeleteAsync(int id)",
            "        {",
            "            var entity = await _context.${2:Entity}s.FindAsync(id);",
            "            if (entity != null)",
            "            {",
            "                _context.${2:Entity}s.Remove(entity);",
            "                await _context.SaveChangesAsync();",
            "            }",
            "        }",
            "    }",
            "}"
        ],
        "description": "Cria a implementação de um repositório com Entity Framework."
    }
}